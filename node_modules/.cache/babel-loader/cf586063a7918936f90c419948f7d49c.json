{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Desktop/newPortfolio/sophia-portfolio/src/components/cards/cards.jsx\",\n    _s = $RefreshSig$();\n\nimport { render } from \"react-dom\";\nimport React, { useState } from \"react\";\nimport { useSprings, animated, interpolate } from \"react-spring\";\nimport { useGesture } from \"react-use-gesture\";\nimport \"./cards.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cards = [\"https://upload.wikimedia.org/wikipedia/en/f/f5/RWS_Tarot_08_Strength.jpg\", \"https://upload.wikimedia.org/wikipedia/en/5/53/RWS_Tarot_16_Tower.jpg\", \"https://upload.wikimedia.org/wikipedia/en/9/9b/RWS_Tarot_07_Chariot.jpg\", \"https://upload.wikimedia.org/wikipedia/en/d/db/RWS_Tarot_06_Lovers.jpg\", \"https://upload.wikimedia.org/wikipedia/en/thumb/8/88/RWS_Tarot_02_High_Priestess.jpg/690px-RWS_Tarot_02_High_Priestess.jpg\", \"https://upload.wikimedia.org/wikipedia/en/d/de/RWS_Tarot_01_Magician.jpg\"]; // These two are just helpers, they curate spring data, values that are later being interpolated into css\n\nconst to = i => ({\n  x: 0,\n  y: i * -4,\n  scale: 1,\n  rot: -10 + Math.random() * 20,\n  delay: i * 100\n});\n\nconst from = i => ({\n  x: 0,\n  rot: 0,\n  scale: 1.5,\n  y: -1000\n}); // This is being used down there in the view, it interpolates rotation and scale into a css transform\n\n\nconst trans = (r, s) => `perspective(1500px) rotateX(30deg) rotateY(${r / 10}deg) rotateZ(${r}deg) scale(${s})`;\n\nfunction Deck() {\n  _s();\n\n  const [gone] = useState(() => new Set()); // The set flags all the cards that are flicked out\n\n  const [props, set] = useSprings(cards.length, i => ({ ...to(i),\n    from: from(i)\n  })); // Create a bunch of springs using the helpers above\n  // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\n\n  const bind = useGesture(({\n    args: [index],\n    down,\n    delta: [xDelta],\n    distance,\n    direction: [xDir],\n    velocity\n  }) => {\n    const trigger = velocity > 0.2; // If you flick hard enough it should trigger the card to fly out\n\n    const dir = xDir < 0 ? -1 : 1; // Direction should either point left or right\n\n    if (!down && trigger) gone.add(index); // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\n\n    set(i => {\n      if (index !== i) return; // We're only interested in changing spring-data for the current spring\n\n      const isGone = gone.has(index);\n      const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0; // When a card is gone it flys out left or right, otherwise goes back to zero\n\n      const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0); // How much the card tilts, flicking it harder makes it rotate faster\n\n      const scale = down ? 1.1 : 1; // Active cards lift up a bit\n\n      return {\n        x,\n        rot,\n        scale,\n        delay: undefined,\n        config: {\n          friction: 50,\n          tension: down ? 800 : isGone ? 200 : 500\n        }\n      };\n    });\n    if (!down && gone.size === cards.length) setTimeout(() => gone.clear() || set(i => to(i)), 600);\n  }); // Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\n\n  return props.map(({\n    x,\n    y,\n    rot,\n    scale\n  }, i) => /*#__PURE__*/_jsxDEV(animated.div, {\n    style: {\n      transform: interpolate([x, y], (x, y) => `translate3d(${x}px,${y}px,0)`)\n    },\n    children: /*#__PURE__*/_jsxDEV(animated.div, { ...bind(i),\n      style: {\n        transform: interpolate([rot, scale], trans),\n        backgroundImage: `url(${cards[i]})`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, i, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this));\n}\n\n_s(Deck, \"GJ+tDNDoxUfn3sSn5jI87QbWEeI=\", false, function () {\n  return [useSprings, useGesture];\n});\n\n_c = Deck;\nrender( /*#__PURE__*/_jsxDEV(Deck, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 91,\n  columnNumber: 8\n}, this), document.getElementById(\"root\"));\n\nvar _c;\n\n$RefreshReg$(_c, \"Deck\");","map":{"version":3,"sources":["/Users/apple/Desktop/newPortfolio/sophia-portfolio/src/components/cards/cards.jsx"],"names":["render","React","useState","useSprings","animated","interpolate","useGesture","cards","to","i","x","y","scale","rot","Math","random","delay","from","trans","r","s","Deck","gone","Set","props","set","length","bind","args","index","down","delta","xDelta","distance","direction","xDir","velocity","trigger","dir","add","isGone","has","window","innerWidth","undefined","config","friction","tension","size","setTimeout","clear","map","transform","backgroundImage","document","getElementById"],"mappings":"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","sourcesContent":["import { render } from \"react-dom\";\nimport React, { useState } from \"react\";\nimport { useSprings, animated, interpolate } from \"react-spring\";\nimport { useGesture } from \"react-use-gesture\";\nimport \"./cards.css\";\n\nconst cards = [\n  \"https://upload.wikimedia.org/wikipedia/en/f/f5/RWS_Tarot_08_Strength.jpg\",\n  \"https://upload.wikimedia.org/wikipedia/en/5/53/RWS_Tarot_16_Tower.jpg\",\n  \"https://upload.wikimedia.org/wikipedia/en/9/9b/RWS_Tarot_07_Chariot.jpg\",\n  \"https://upload.wikimedia.org/wikipedia/en/d/db/RWS_Tarot_06_Lovers.jpg\",\n  \"https://upload.wikimedia.org/wikipedia/en/thumb/8/88/RWS_Tarot_02_High_Priestess.jpg/690px-RWS_Tarot_02_High_Priestess.jpg\",\n  \"https://upload.wikimedia.org/wikipedia/en/d/de/RWS_Tarot_01_Magician.jpg\",\n];\n\n// These two are just helpers, they curate spring data, values that are later being interpolated into css\nconst to = (i) => ({\n  x: 0,\n  y: i * -4,\n  scale: 1,\n  rot: -10 + Math.random() * 20,\n  delay: i * 100,\n});\nconst from = (i) => ({ x: 0, rot: 0, scale: 1.5, y: -1000 });\n// This is being used down there in the view, it interpolates rotation and scale into a css transform\nconst trans = (r, s) =>\n  `perspective(1500px) rotateX(30deg) rotateY(${\n    r / 10\n  }deg) rotateZ(${r}deg) scale(${s})`;\n\nfunction Deck() {\n  const [gone] = useState(() => new Set()); // The set flags all the cards that are flicked out\n  const [props, set] = useSprings(cards.length, (i) => ({\n    ...to(i),\n    from: from(i),\n  })); // Create a bunch of springs using the helpers above\n  // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\n  const bind = useGesture(\n    ({\n      args: [index],\n      down,\n      delta: [xDelta],\n      distance,\n      direction: [xDir],\n      velocity,\n    }) => {\n      const trigger = velocity > 0.2; // If you flick hard enough it should trigger the card to fly out\n      const dir = xDir < 0 ? -1 : 1; // Direction should either point left or right\n      if (!down && trigger) gone.add(index); // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\n      set((i) => {\n        if (index !== i) return; // We're only interested in changing spring-data for the current spring\n        const isGone = gone.has(index);\n        const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0; // When a card is gone it flys out left or right, otherwise goes back to zero\n        const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0); // How much the card tilts, flicking it harder makes it rotate faster\n        const scale = down ? 1.1 : 1; // Active cards lift up a bit\n        return {\n          x,\n          rot,\n          scale,\n          delay: undefined,\n          config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 },\n        };\n      });\n      if (!down && gone.size === cards.length)\n        setTimeout(() => gone.clear() || set((i) => to(i)), 600);\n    }\n  );\n  // Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\n  return props.map(({ x, y, rot, scale }, i) => (\n    <animated.div\n      key={i}\n      style={{\n        transform: interpolate(\n          [x, y],\n          (x, y) => `translate3d(${x}px,${y}px,0)`\n        ),\n      }}\n    >\n      {/* This is the card itself, we're binding our gesture to it (and inject its index so we know which is which) */}\n      <animated.div\n        {...bind(i)}\n        style={{\n          transform: interpolate([rot, scale], trans),\n          backgroundImage: `url(${cards[i]})`,\n        }}\n      />\n    </animated.div>\n  ));\n}\n\nrender(<Deck />, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}